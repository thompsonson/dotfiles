{{ $commonPackages := list
     "curl"
     "direnv" 
     "jq"
     "make"
     "rsync"
     "tree"
     "ripgrep"
     "fzf"
     "grep"
     "findutils"
     "coreutils"
     "zsh" -}}

{{ $brewPackages := list
     "fnm"
     "btop"
     "tldr"
     "uv"
     "sqlite"
     "gh" -}}

{{ $modernCli := list
     "bat"
     "eza" 
     "fd"
     "git-delta"
     "ncdu"
     "httpie"
     "tmux" -}}

{{ $macosSpecific := list 
     "python" 
     "docker" 
     "openssh" 
     "docker-compose" 
     "awscli"
     "macdown"
     "gpg" -}}

{{ $nerdFonts := list
     "MesloLGS NF Regular.ttf"
     "MesloLGS NF Bold.ttf" 
     "MesloLGS NF Italic.ttf"
     "MesloLGS NF Bold Italic.ttf" -}}

{{ $npmPackages := list
     "@anthropic-ai/claude-code" -}}

#!/bin/bash

# Detect WSL environment
is_wsl() {
  if [ -f /proc/version ] && grep -qi "microsoft\|wsl" /proc/version; then
    return 0
  elif [ -d /mnt/c ]; then
    return 0
  else
    return 1
  fi
}

{{ if eq .osid "linux-debian" "linux-raspbian" "linux-pop" "linux-ubuntu" -}}
echo '🐧 Installing Linux packages'

{{ $linuxSpecific := list "python3" "python3-pip" "fontconfig" "openssh-client" "gpg" -}}
{{ $linuxWithDocker := list "python3" "python3-pip" "fontconfig" "docker.io" "openssh-client" "docker-compose-plugin" "gpg" -}}
{{ $sudo := "sudo " -}}
{{ if eq .chezmoi.username "root" -}}
{{   $sudo = "" -}}
{{ end -}}

{{ $sudo }}apt-get update

# Choose package list based on environment
if is_wsl; then
  echo '🪟 Detected WSL environment - installing without Docker'
  {{ $allLinuxPackages := concat $commonPackages $linuxSpecific -}}
  {{ $sudo }}apt-get install -y {{ $allLinuxPackages | join " " }}
  
  # WSL-specific configurations
  echo 'Configuring WSL-specific settings'
  
  # Fix for WSL file permissions
  if [ ! -f /etc/wsl.conf ]; then
    {{ $sudo }}tee /etc/wsl.conf > /dev/null <<EOF
[automount]
enabled = true
root = /mnt/
options = "metadata,umask=22,fmask=11"

[interop]
enabled = true
appendWindowsPath = true

[user]
default = {{ .chezmoi.username }}
EOF
    echo '📝 Created /etc/wsl.conf - you may need to restart WSL for changes to take effect'
    echo '   Run "wsl --shutdown" from Windows PowerShell, then restart your WSL session'
  fi
  
  # Set up Windows interop
  if [ -d /mnt/c/Windows/System32 ]; then
    echo 'Windows interop detected - add to PATH via chezmoi templates'
    echo 'Suggested PATH addition: export PATH="$PATH:/mnt/c/Windows/System32"'
  fi
  
  # Get Windows username (may be different from WSL username)
  WINDOWS_USER=$(cmd.exe /c "echo %USERNAME%" 2>/dev/null | tr -d '\r\n')
  echo "Windows username: $WINDOWS_USER, WSL username: $(whoami)"
  
  # Verify Windows user directory exists
  if [ ! -d "/mnt/c/Users/$WINDOWS_USER" ]; then
    echo "Warning: Windows user directory /mnt/c/Users/$WINDOWS_USER not found"
    echo "Available users:" 
    ls -la /mnt/c/Users/ 2>/dev/null || echo "Cannot access /mnt/c/Users/"
    echo "You may need to adjust the Windows username or check WSL mount configuration"
  fi
  
  # Create symbolic links to common Windows directories
  echo 'Creating convenient Windows directory links'
  mkdir -p ~/Windows
  [ ! -L ~/Windows/Desktop ] && [ -d "/mnt/c/Users/$WINDOWS_USER/Desktop" ] && ln -sf "/mnt/c/Users/$WINDOWS_USER/Desktop" ~/Windows/Desktop
  [ ! -L ~/Windows/Documents ] && [ -d "/mnt/c/Users/$WINDOWS_USER/Documents" ] && ln -sf "/mnt/c/Users/$WINDOWS_USER/Documents" ~/Windows/Documents
  [ ! -L ~/Windows/Downloads ] && [ -d "/mnt/c/Users/$WINDOWS_USER/Downloads" ] && ln -sf "/mnt/c/Users/$WINDOWS_USER/Downloads" ~/Windows/Downloads
  
  # Display what was created
  echo "Created Windows directory links:"
  ls -la ~/Windows/ 2>/dev/null || echo "No Windows directory links created"

  echo 'ℹ️  Consider adding WSL aliases to your chezmoi .zshrc template:'
  echo '   alias explorer="explorer.exe"'
  echo '   alias notepad="notepad.exe"'
  echo '   alias code="code.exe"'
  echo '   alias docker="docker.exe"'
  echo '   alias docker-compose="docker-compose.exe"'

else
  echo '🐧 Standard Linux environment - installing with Docker'
  {{ $allLinuxPackages := concat $commonPackages $linuxWithDocker -}}
  {{ $sudo }}apt-get install -y {{ $allLinuxPackages | join " " }}
  
  # Start and enable Docker (non-WSL only)
  {{ $sudo }}systemctl start docker
  {{ $sudo }}systemctl enable docker
  {{ $sudo }}usermod -aG docker {{ .chezmoi.username }}
fi

# Install pipx (Linux method)
if ! command -v pipx >/dev/null 2>&1; then
  echo 'Installing pipx'
  python3 -m pip install --user pipx
  python3 -m pipx ensurepath
fi

{{ if eq .chezmoi.arch "amd64" -}}
# Install Homebrew
command -v brew >/dev/null 2>&1 || \
  (echo '🍺  Installing Homebrew' && /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)")

# Set up the environment for this session only
if [ -d ~/.linuxbrew ]; then
  eval "$(~/.linuxbrew/bin/brew shellenv)"
elif [ -d /home/linuxbrew/.linuxbrew ]; then
  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi

echo 'ℹ️  Note: Add Homebrew to your shell PATH via chezmoi templates:'
echo '   For Linux: eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"'
echo '   Or: eval "$(~/.linuxbrew/bin/brew shellenv)"'

# Install additional brew packages (including modern CLI tools)
{{ $allBrewPackages := concat $brewPackages $modernCli -}}
brew install {{ $allBrewPackages | join " " }}
{{ else -}}
# Install modern CLI tools via apt for non-amd64 architectures
{{ $sudo }}apt-get install -y bat fd-find ncdu tmux
# Note: eza, delta, httpie may need alternative installation methods on ARM
{{ end -}}

# Set up fnm and install Node.js (after Homebrew packages are installed)
if command -v fnm >/dev/null 2>&1; then
  echo 'Setting up fnm and installing Node.js LTS'
  
  # Set up fnm environment for current session
  eval "$(fnm env --use-on-cd)"
  
  # Install latest LTS Node.js
  fnm install --lts
  fnm use lts-latest
  fnm default lts-latest
  
  echo "Node.js version: $(node --version)"
  echo "npm version: $(npm --version)"
  
  # Install global npm packages
  echo 'Installing global npm packages'
  {{ range $npmPackages -}}
  npm install -g {{ . }}
  {{ end -}}
  
  # Show installed package versions
  if command -v claude >/dev/null 2>&1; then
    echo "claude version: $(claude --version)"
  fi
else
  echo 'fnm not found - Node.js installation skipped'
fi

# Install fonts (Linux/WSL)
echo 'Installing fonts for Linux/WSL'
NERD='\U1f913'

if is_wsl; then
  echo '🪟 WSL detected - installing fonts to Linux directory only'
  echo '💡 Install fonts to Windows manually via Windows Terminal or Settings'
fi

# Use Linux font directory for both Linux and WSL
FONT_DIR="$HOME/.local/share/fonts"
mkdir -p "$FONT_DIR"

# Install Droid Sans Mono Nerd Font  
if [ ! -f "$FONT_DIR/DroidSansMNerdFont-Regular.otf" ]; then
  echo -e "${NERD} Installing Droid Sans Mono Nerd Font"
  curl -fLo "$FONT_DIR/DroidSansMNerdFont-Regular.otf" "https://github.com/ryanoasis/nerd-fonts/raw/HEAD/patched-fonts/DroidSansMono/DroidSansMNerdFont-Regular.otf" || echo "Failed to download Droid Sans font"
fi

# Install Meslo Nerd Fonts (PowerLevel10k compatible)
{{ range $font := $nerdFonts -}}
font_filename=$(echo "{{ $font }}" | sed -e 's/ //g')
font_urlencoded=$(echo "{{ $font }}" | sed -e 's/ /%20/g')
if [ ! -f "$FONT_DIR/$font_filename" ]; then
  (echo -e "${NERD} Installing font {{ $font }} for PowerLevel10k" && curl -fLo "$FONT_DIR/$font_filename" "https://github.com/romkatv/powerlevel10k-media/raw/master/$font_urlencoded") || echo "Failed to download {{ $font }}"
fi
{{ end -}}

# Refresh font cache
fc-cache -f -v "$FONT_DIR"

if is_wsl; then
  echo '📝 Fonts installed to Linux. For Windows Terminal, install fonts manually:'
  echo '   • Download Nerd Fonts from: https://github.com/ryanoasis/nerd-fonts'
  echo '   • Or use: winget install Meslo.LG.NF'
else
  echo 'Fonts installed! You may need to restart your terminal and select a Nerd Font.'
fi
{{ end -}}


{{ if eq .chezmoi.os "darwin" -}}
echo '🍎 Installing macOS packages'
{{ $allMacosPackages := concat $commonPackages $macosSpecific $brewPackages $modernCli -}}

# Install Homebrew first if needed
command -v brew >/dev/null 2>&1 || \
  (echo '🍺  Installing Homebrew' && /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)")

# Ensure Homebrew is in PATH and environment is set up
export PATH="/usr/local/bin:/usr/local/sbin:$PATH"
eval "$(/usr/local/bin/brew shellenv)" 2>/dev/null || true

# Function to install packages with progress
install_with_progress() {
  local packages=($@)
  local total=${#packages[@]}
  local current=0
  local failed_packages=()
  
  echo "📦 Installing $total packages..."
  
  # Ensure brew is in PATH
  export PATH="/usr/local/bin:$PATH"
  
  for package in "${packages[@]}"; do
    current=$((current + 1))
    echo "[$current/$total] Installing $package..."
    
    if brew list "$package" &>/dev/null; then
      echo "  ✅ $package already installed"
    else
      echo "  🔄 Installing $package..."
      if brew install "$package" 2>&1; then
        echo "  ✅ $package installed successfully"
      else
        echo "  ❌ Failed to install $package"
        failed_packages+=("$package")
      fi
    fi
    echo ""
  done
  
  if [ ${#failed_packages[@]} -gt 0 ]; then
    echo "⚠️  Failed to install: ${failed_packages[*]}"
    echo "You can retry these manually: brew install ${failed_packages[*]}"
  fi
}

# Ensure Homebrew is in PATH
export PATH="/usr/local/bin:/usr/local/sbin:$PATH"

# Install all packages with progress indicators
{{ $allMacosPackages := concat $commonPackages $macosSpecific $brewPackages $modernCli -}}
install_with_progress {{ $allMacosPackages | join " " }}

# Install Docker Desktop
if ! command -v docker >/dev/null 2>&1; then
  echo 'Installing Docker Desktop'
  brew install --cask docker
fi

# Install pipx (macOS method)
if ! command -v pipx >/dev/null 2>&1; then
  echo 'Installing pipx'
  brew install pipx
  pipx ensurepath
fi

# Install macOS applications
echo 'Installing macOS applications'

# Install Visual Studio Code
if ! command -v code >/dev/null 2>&1; then
  echo 'Installing Visual Studio Code'
  brew install --cask visual-studio-code
fi

# Install productivity apps
echo 'Installing productivity apps'
brew install --cask rectangle    # Window management
brew install --cask alfred       # Spotlight replacement

# Configure macOS system preferences
echo 'Configuring macOS system preferences'
defaults write com.apple.dock autohide -bool true
defaults write com.apple.finder ShowPathbar -bool true
defaults write com.apple.finder ShowStatusBar -bool true
defaults write com.apple.finder FXDefaultSearchScope -string "SCcf"  # Search current folder by default
defaults write com.apple.screencapture location -string "$HOME/Desktop/Screenshots"
mkdir -p "$HOME/Desktop/Screenshots"

# Install fonts (macOS)
echo 'Installing fonts for macOS'
NERD='\U1f913'
FONT_DIR="$HOME/Library/Fonts"
mkdir -p "$FONT_DIR"

# Install Droid Sans Mono Nerd Font
if [ ! -f "$FONT_DIR/Droid Sans Mono for Powerline Nerd Font Complete.otf" ]; then
  (echo -e "${NERD} Installing Droid Sans Mono Nerd Font" && curl -fLo "$FONT_DIR/Droid Sans Mono for Powerline Nerd Font Complete.otf" https://github.com/ryanoasis/nerd-fonts/raw/HEAD/patched-fonts/DroidSansMono/complete/Droid%20Sans%20Mono%20Nerd%20Font%20Complete.otf)
fi

# Install Meslo Nerd Fonts (same list as Linux)
{{ range $font := $nerdFonts -}}
font_filename=$(echo "{{ $font }}" | sed -e 's/ //g')
font_urlencoded=$(echo "{{ $font }}" | sed -e 's/ /%20/g')
if [ ! -f "$FONT_DIR/$font_filename" ]; then
  (echo -e "${NERD} Installing font {{ $font }} for PowerLevel10k" && curl -fLo "$FONT_DIR/$font_filename" "https://github.com/romkatv/powerlevel10k-media/raw/master/$font_urlencoded")
fi
{{ end -}}

echo 'Fonts installed! You may need to restart your terminal and select a Nerd Font.'
{{ end -}}

# Common installations and configuration for all platforms
echo '⚙️  Installing common tools and configuring environment'

# Refresh PATH to pick up newly installed tools for current session
{{ if eq .chezmoi.os "darwin" -}}
export PATH="/usr/local/bin:/usr/local/sbin:$PATH"
eval "$(/usr/local/bin/brew shellenv)" 2>/dev/null || true
{{ else -}}
# Source brew environment for current session
if [ -d ~/.linuxbrew ]; then
  eval "$(~/.linuxbrew/bin/brew shellenv)"
elif [ -d /home/linuxbrew/.linuxbrew ]; then
  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi
{{ end -}}

# Create development directories
echo 'Creating development directories'
mkdir -p ~/Code ~/Projects ~/Scripts

# Git configuration
echo 'Configuring Git'
git config --global user.name "Matthew Thompson"
git config --global user.email "thompsonson@gmail.com"
git config --global init.defaultBranch main
git config --global pull.rebase true
git config --global core.autocrlf input

# Set editor based on platform and environment
{{ if eq .chezmoi.os "darwin" -}}
git config --global core.editor "code --wait"
export EDITOR="code"
{{ else -}}
if is_wsl && command -v code.exe >/dev/null 2>&1; then
  git config --global core.editor "code.exe --wait"
  export EDITOR="code.exe"
else
  git config --global core.editor "nano"
  export EDITOR="nano"
fi
{{ end -}}

# Configure Git to use delta for better diffs
if command -v delta >/dev/null 2>&1; then
  git config --global core.pager delta
  git config --global interactive.diffFilter "delta --color-only"
  git config --global delta.navigate true
  git config --global delta.light false
  git config --global merge.conflictstyle diff3
  git config --global diff.colorMoved default
fi

# GPG setup for signed commits (only if GPG is available)
if command -v gpg >/dev/null 2>&1; then
  echo 'Setting up GPG for signed commits'
  if ! gpg --list-secret-keys --keyid-format LONG | grep -q "sec"; then
  echo 'Generating GPG key for signed commits'
  
  # Create a temporary file for GPG key generation
  GPG_CONFIG=$(mktemp)
  cat > "$GPG_CONFIG" << EOF
Key-Type: RSA
Key-Length: 4096
Name-Real: Matthew Thompson
Name-Email: thompsonson@gmail.com
Expire-Date: 2y
%no-protection
%commit
EOF

  gpg --batch --generate-key "$GPG_CONFIG"
  rm "$GPG_CONFIG"
  
  # Configure git to use GPG
  GPG_KEY=$(gpg --list-secret-keys --keyid-format LONG | grep sec | head -1 | sed 's/.*\/\([A-Z0-9]*\).*/\1/')
  git config --global user.signingkey "$GPG_KEY"
  git config --global commit.gpgsign true
  
  echo '📋 Your GPG public key (add this to GitHub/GitLab):'
  gpg --armor --export "$GPG_KEY"
  echo ''
  echo '💡 Copy the key above and add it to your GitHub/GitLab GPG keys settings'
  else
    echo 'GPG key already exists'
  fi
else
  echo 'GPG not found - skipping GPG setup. Install GPG first: brew install gpg'
fi

# SSH setup and key management
echo 'Setting up SSH'
mkdir -p ~/.ssh
chmod 700 ~/.ssh

# Generate SSH key if it doesn't exist (using modern ed25519)
if [ ! -f ~/.ssh/id_ed25519 ]; then
  echo 'Generating new SSH key'
  ssh-keygen -t ed25519 -C "thompsonson@gmail.com" -f ~/.ssh/id_ed25519 -N ""
  
  # Start ssh-agent and add key
  eval "$(ssh-agent -s)"
  ssh-add ~/.ssh/id_ed25519
  
  echo '📋 Your SSH public key (add this to GitHub/GitLab):'
  cat ~/.ssh/id_ed25519.pub
  echo ''
  if is_wsl; then
    echo '💡 Tip: Run "cat ~/.ssh/id_ed25519.pub | clip.exe" to copy to Windows clipboard'
  {{ if eq .chezmoi.os "darwin" -}}
  else
    echo '💡 Tip: Run "pbcopy < ~/.ssh/id_ed25519.pub" to copy to clipboard'
  {{ end -}}
  fi
else
  echo 'SSH key already exists'
  # Add to ssh-agent if running
  if pgrep -x ssh-agent > /dev/null; then
    ssh-add ~/.ssh/id_ed25519 2>/dev/null || true
  fi
fi

# Basic SSH config
if [ ! -f ~/.ssh/config ]; then
  cat > ~/.ssh/config << 'EOF'
# Default settings for all hosts
Host *
  AddKeysToAgent yes
  UseKeychain yes
  IdentityFile ~/.ssh/id_ed25519
  ServerAliveInterval 60
  ServerAliveCountMax 3

# GitHub
Host github.com
  HostName github.com
  User git
  IdentityFile ~/.ssh/id_ed25519

# GitLab
Host gitlab.com
  HostName gitlab.com
  User git
  IdentityFile ~/.ssh/id_ed25519
EOF
  chmod 600 ~/.ssh/config
fi

# Configure environment for current session only
echo 'Setting up current session environment'

# Add ~/bin to current PATH and create directory
export PATH="$HOME/bin:$PATH"
mkdir -p ~/bin

# Source brew environment for current session if available
{{ if eq .chezmoi.os "darwin" -}}
export PATH="/usr/local/bin:/usr/local/sbin:$PATH"
eval "$(/usr/local/bin/brew shellenv)" 2>/dev/null || true
{{ else -}}
if [ -d ~/.linuxbrew ]; then
  eval "$(~/.linuxbrew/bin/brew shellenv)"
elif [ -d /home/linuxbrew/.linuxbrew ]; then
  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi
{{ end -}}

# Note: Shell configuration (aliases, PATH, etc.) should be managed by chezmoi templates
echo 'ℹ️  Note: Shell configuration (.zshrc) should be managed by chezmoi templates'

# Install Poetry (same method everywhere)
if ! command -v poetry >/dev/null 2>&1; then
  echo 'Installing Poetry'
  curl -sSL https://install.python-poetry.org | python3 -
fi

# OpenHands + LiteLLM Setup (no secrets in this script)
echo '🤖 Installing OpenHands and LiteLLM'

# Pull Docker images
if command -v docker >/dev/null 2>&1; then
  echo 'Pulling required Docker images'
  docker pull docker.all-hands.dev/all-hands-ai/runtime:0.39-nikolaik
  docker pull docker.all-hands.dev/all-hands-ai/openhands:0.39
  docker pull ghcr.io/berriai/litellm:main-latest
else
  echo 'Docker not available - manual setup required'
fi

# Install via pipx if available
if command -v pipx >/dev/null 2>&1; then
  echo 'Installing OpenHands via pipx'
  pipx install openhands-ai || echo "Using Docker instead"
fi

# Ensure tools are available in current session
{{ if eq .chezmoi.os "darwin" -}}
export PATH="/usr/local/bin:$PATH"
{{ else -}}
# Source brew environment if available for current session
if [ -d ~/.linuxbrew ]; then
  eval "$(~/.linuxbrew/bin/brew shellenv)"
elif [ -d /home/linuxbrew/.linuxbrew ]; then
  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
fi
{{ end -}}
hash -r  # Clear command cache

# Install OpenHands via uv if available
if command -v uv >/dev/null 2>&1; then
  echo 'Installing OpenHands AI CLI via uv'
  if ! command -v openhands >/dev/null 2>&1; then
    uv tool install openhands-ai || echo "Failed to install OpenHands - continuing..."
  else
    echo 'OpenHands already installed'
  fi
else
  echo 'Warning: uv not found in PATH, skipping OpenHands installation'
  echo "Current PATH: $PATH"
  echo "Brew status: $(command -v brew || echo 'not found')"
  echo "Try: brew install uv"
fi

# Create configuration directories
mkdir -p ~/.openhands-state
mkdir -p ~/.config/litellm

# Note: LiteLLM configuration is now managed by chezmoi templates
# See: ~/.config/litellm/config.yaml (generated from dot_config/litellm/config.yaml.tmpl)
# Using file-based configuration - no database required

# Create OpenHands configuration
cat > ~/.openhands-state/settings.json << 'EOF'
{
  "language": "en",
  "agent": "CodeActAgent",
  "max_iterations": null,
  "security_analyzer": null,
  "confirmation_mode": false,
  "llm_model": "openai/devstral",
  "llm_api_key": "local_dev_key_change_me",
  "llm_base_url": "http://localhost:4000",
  "remote_runtime_resource_factor": null,
  "github_token": null,
  "enable_default_condenser": true
}
EOF

echo '✅ OpenHands and LiteLLM setup complete!'
echo ''
echo '🔐 IMPORTANT: Set your API key securely:'
echo '   1. Create ~/.env with: MISTRAL_API_KEY=your_key_here'
echo '   2. Never commit API keys to git!'
echo ''
echo '💡 Then run:'
echo '   ai-start         # Start LiteLLM proxy'
echo '   openhands-start  # Start OpenHands'
echo '   ai-dev test      # Test the setup'

# Install Oh My Zsh (same everywhere)
if [ ! -f ~/.oh-my-zsh/oh-my-zsh.sh ]; then
  (echo '💰  Installing oh-my-zsh' && yes | sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)")
fi

# Install Antigen (same everywhere)
MASK='\U1f637'
if [ ! -f ~/.zsh/antigen/antigen.zsh ]; then
  mkdir -p ~/.zsh/antigen
  (echo -e "${MASK} Installing Antigen plugin Manager" && curl -L git.io/antigen > ~/.zsh/antigen/antigen.zsh)
fi

echo '✅ Installation complete!'
echo ''

# Platform-specific next steps
if is_wsl; then
  echo '🪟 WSL-specific notes:'
  echo '   • Fonts installed to Linux - use in WSL terminals'
  echo '   • For Windows Terminal, install fonts manually: winget install Meslo.LG.NF'
  echo '   • Windows directories linked in ~/Windows/ for convenience'
  echo '   • Add WSL aliases to your chezmoi .zshrc template (see suggestions above)'
  echo '   • Add Windows PATH to your chezmoi template if needed'
  echo '   • Run "wsl --shutdown" from PowerShell if you need to restart WSL'
  echo ''
fi

echo '📝 Next steps:'
echo '   1. Update your chezmoi .zshrc template to include:'
echo '      • Homebrew setup: eval "$(brew shellenv)"'
echo '      • ~/bin in PATH (already in your template)'
echo '      • Any additional aliases you want'
echo '   2. Apply chezmoi templates: chezmoi apply'
echo '   3. Restart your terminal: exec zsh'
echo '   4. Install any failed packages manually: brew install <package-name>'
echo '   5. Add your SSH public key to GitHub/GitLab'
if command -v gpg >/dev/null 2>&1; then
echo '   6. Add your GPG public key to GitHub/GitLab for verified commits'
else
echo '   6. Install GPG: brew install gpg, then re-run this script'
fi
echo '   7. Select a Nerd Font in your terminal preferences (MesloLGS NF recommended)'

{{ if eq .chezmoi.os "darwin" -}}
echo '   7. Start Docker Desktop from Applications'
echo '   8. Configure Rectangle for window management'
echo '   9. Set up Alfred as your Spotlight replacement'
{{ else -}}
if ! is_wsl; then
echo '   7. Log out and back in to apply Docker group membership'
fi
{{ end -}}

echo '   10. Test modern CLI tools: bat --version, eza --version, fd --version'
echo ''

# Troubleshooting section
echo '🔧 Troubleshooting:'
echo '   • If brew command not found: add brew setup to your chezmoi .zshrc template'
echo '   • If docker completions fail: ensure docker bundle is in your antigen config'
echo '   • Shell configuration managed by chezmoi - do not edit .zshrc directly'
echo '   • For chezmoi: install with "sudo snap install chezmoi" or "brew install chezmoi"'
echo '   • Run "chezmoi doctor" to check chezmoi configuration'
echo ''
echo '📋 Suggested additions to your chezmoi .zshrc template:'
echo ''
echo '# Add to the top (before antigen setup):'
echo 'export PATH="$HOME/bin:$PATH"'
echo ''
{{ if ne .chezmoi.os "darwin" -}}
echo '# Add Homebrew setup (Linux/WSL):'
echo 'if [ -d /home/linuxbrew/.linuxbrew ]; then'
echo '  eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"'
echo 'elif [ -d ~/.linuxbrew ]; then'
echo '  eval "$(~/.linuxbrew/bin/brew shellenv)"'
echo 'fi'
echo ''
{{ end -}}
if is_wsl; then
echo '# WSL-specific aliases:'
echo 'alias explorer="explorer.exe"'
echo 'alias code="code.exe"'
echo 'alias docker="docker.exe"'
echo 'alias docker-compose="docker-compose.exe"'
echo ''
echo '# Windows PATH (optional):'
echo 'export PATH="$PATH:/mnt/c/Windows/System32"'
echo ''
fi
echo '# Modern CLI aliases (add after antigen apply):'
echo 'if command -v eza >/dev/null 2>&1; then'
echo '  alias ls="eza --icons"'
echo '  alias ll="eza -la --icons --header"'
echo 'fi'
echo ''
echo 'if command -v bat >/dev/null 2>&1; then'
echo '  alias cat="bat"'
echo 'fi'
echo ''
echo '🎉 Your development environment is ready!'