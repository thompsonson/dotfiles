{{ if eq .osid "linux-debian" "linux-raspbian" "linux-pop" "linux-ubuntu" -}}

{{ $packages := list
     "curl"
     "direnv"
     "jq"
     "make"
     "rsync"
     "tree"
     "ripgrep"
     "fzf"
     "zsh"
     "fish" 
     "python3"    
     "python3-pip"
     "fontconfig" -}}

{{ $sudo := "sudo " -}}
{{ if eq .chezmoi.username "root" -}}
{{   $sudo = "" -}}
{{ end -}}

#!/bin/bash

{{ $sudo }}apt-get update
# Install the packages
{{ $sudo }}apt-get install -y {{ $packages | join " " }}

# Install pipx
if ! command -v pipx >/dev/null 2>&1; then
  echo 'Installing pipx'
  python3 -m pip install --user pipx
  python3 -m pipx ensurepath
fi

# Install Poetry
if ! command -v poetry >/dev/null 2>&1; then
  echo 'Installing Poetry'
  curl -sSL https://install.python-poetry.org | python3 -
fi

{{ if eq .chezmoi.arch "amd64" -}}

# Install Homebrew
command -v brew >/dev/null 2>&1 || \
  (echo '🍺  Installing Homebrew' && /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)")

# Set up the environment
test -d ~/.linuxbrew && eval "$(~/.linuxbrew/bin/brew shellenv)"

# Check if chezmoi is installed and install if not
if ! command -v chezmoi >/dev/null 2>&1; then
  echo 'Installing chezmoi'
  brew install chezmoi
else
  echo 'Chezmoi is already installed'
fi

#Install brew packages - https://docs.brew.sh/Homebrew-on-Linux#arm-unsupported - need to check if these are supported on ARM

brew install btop
brew install tldr 

{{ end -}}

# Install Oh My Zsh - only checks for the script, which doesn't work with .chexmoiexternal approach... can both be used?
if [ ! -f ~/.oh-my-zsh/oh-my-zsh.sh ]; then
  (echo '💰  Installing oh-my-zsh' && yes | sh -c "$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)")
fi

# Install Fisher (Fish shell plugin manager)
if command -v fish >/dev/null 2>&1; then
  fish -c 'if not type fisher > /dev/null 2>&1; curl -sL https://git.io/fisher | source && fisher install jorgebucaran/fisher; end'
fi

# Install nerd fonts
NERD='\U1f913'
if [ ! -f ~/.local/share/fonts/'Droid Sans Mono for Powerline Nerd Font Complete.otf' ]; then
  mkdir -p ~/.local/share/fonts
  cd ~/.local/share/fonts  
  (echo -e "${NERD} Installing Nerd Fonts" && sh -c "$(curl -fLo 'Droid Sans Mono for Powerline Nerd Font Complete.otf' https://github.com/ryanoasis/nerd-fonts/raw/HEAD/patched-fonts/DroidSansMono/complete/Droid%20Sans%20Mono%20Nerd%20Font%20Complete.otf)")
fi
# Install Meslo Nerd Font
for tff in "MesloLGS NF Regular.ttf" "MesloLGS NF Bold.ttf" "MesloLGS NF Italic.ttf" "MesloLGS NF Bold Italic.ttf" 
do
  cd ~/.local/share/fonts
  font_filename=$(echo $tff|sed -e 's/ //g')
  font_urlencoded=$(echo $tff|sed -e 's/ /%20/g')
  if [ ! -f $font_filename ]; then
    echo curl -fLo $font_filename https://github.com/romkatv/powerlevel10k-media/raw/master/$font_urlencoded
    (echo -e "${NERD} Installing font ${tff} for PowerLevel10k" && sh -c "$(curl -fLo $font_filename https://github.com/romkatv/powerlevel10k-media/raw/master/$font_urlencoded)")
  fi
done
# Refresh the font cache
fc-cache -f -v ~/.local/share/fonts

# Install antigen
MASK='\U1f637'
if [ ! -f ~/.zsh/antigen/antigen.zsh ]; then
  mkdir -p ~/.zsh/antigen
  (echo -e "${MASK} Installing Antigen plugin Manager" && sh -c "$(curl -L git.io/antigen > ~/.zsh/antigen/antigen.zsh)")
fi

# Install AWS CLI
if ! command -v aws >/dev/null 2>&1; then
  echo 'Installing AWS CLI'
  python3 -m pip install awscli
fi

# Install nvm (Node Version Manager)
if [ ! -d "$HOME/.nvm" ]; then
  echo 'Installing nvm (Node Version Manager)'
  curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/master/install.sh | bash
  export NVM_DIR="$HOME/.nvm"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
  [ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"
fi

# Load nvm into the current session
export NVM_DIR="$HOME/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"

# Install Node.js using nvm
# You can specify a Node.js version here, e.g., '14.17.0'. Leave it as 'node' to install the latest version
NODE_VERSION=${NODE_VERSION:-'node'}
if ! command -v node >/dev/null 2>&1; then
  echo "Installing Node.js version $NODE_VERSION"
  nvm install $NODE_VERSION
  nvm use $NODE_VERSION
  nvm alias default $NODE_VERSION
fi

# Install Serverless Framework
if ! command -v serverless >/dev/null 2>&1; then
  echo 'Installing Serverless Framework'
  npm install -g serverless
fi

# Run the Fish script if Fish shell is available
if command -v fish >/dev/null 2>&1; then
   grep -qxF 'set -Ua fish_user_paths /home/linuxbrew/.linuxbrew/bin' ~/.config/fish/config.fish || echo 'set -Ua fish_user_paths /home/linuxbrew/.linuxbrew/bin' >> ~/.config/fish/config.fish
else
   echo "Fish shell not found. Please run 'set -Ua fish_user_paths /home/linuxbrew/.linuxbrew/bin' manually in Fish shell."
fi

{{ end -}}
