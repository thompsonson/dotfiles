# If you come from bash you might have to change your $PATH.
export PATH=$HOME/.local/bin:$HOME/bin:$PATH

# History configuration - ADD THIS SECTION
HISTFILE=~/.zsh_history
HISTSIZE=50000
SAVEHIST=50000
setopt EXTENDED_HISTORY          # Write the history file in the ":start:elapsed;command" format.
setopt INC_APPEND_HISTORY        # Write to the history file immediately, not when the shell exits.
setopt SHARE_HISTORY             # Share history between all sessions.
setopt HIST_EXPIRE_DUPS_FIRST    # Expire duplicate entries first when trimming history.
setopt HIST_IGNORE_DUPS          # Don't record an entry that was just recorded again.
setopt HIST_IGNORE_ALL_DUPS      # Delete old recorded entry if new entry is a duplicate.
setopt HIST_FIND_NO_DUPS         # Do not display a line previously found.
setopt HIST_IGNORE_SPACE         # Don't record an entry starting with a space.
setopt HIST_SAVE_NO_DUPS         # Don't write duplicate entries in the history file.
setopt HIST_REDUCE_BLANKS        # Remove superfluous blanks before recording entry.

# Detect platform
IS_WSL=false
IS_MACOS=false
IS_LINUX=false

if [[ "$OSTYPE" == "darwin"* ]]; then
  IS_MACOS=true
elif [ -f /proc/version ] && grep -qi "microsoft\|wsl" /proc/version; then
  IS_WSL=true
else
  IS_LINUX=true
fi

# Homebrew setup
if [ "$IS_MACOS" = true ]; then
  # macOS Homebrew
  if [ -d /opt/homebrew ]; then
    eval "$(/opt/homebrew/bin/brew shellenv)"
  elif [ -d /usr/local/Homebrew ]; then
    eval "$(/usr/local/bin/brew shellenv)"
  fi
elif [ "$IS_LINUX" = true ] || [ "$IS_WSL" = true ]; then
  # Linux/WSL Homebrew
  if [ -d /home/linuxbrew/.linuxbrew ]; then
    eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
  elif [ -d ~/.linuxbrew ]; then
    eval "$(~/.linuxbrew/bin/brew shellenv)"
  fi
fi

# Node.js version management with fnm
if command -v fnm >/dev/null 2>&1; then
  eval "$(fnm env --use-on-cd)"
fi

# Create missing completion directories to prevent errors (all platforms)
mkdir -p ~/.antigen/bundles/robbyrussell/oh-my-zsh/cache/completions 2>/dev/null

# WSL-specific setup
if [ "$IS_WSL" = true ]; then
  # WSL-specific aliases
  alias explorer="explorer.exe"
  alias notepad="notepad.exe"
fi

source ~/.zsh/antigen/antigen.zsh

# Load the oh-my-zsh's library.
antigen use oh-my-zsh

# Base bundles that work everywhere
antigen bundle command-not-found
antigen bundle git
antigen bundle kubectl
antigen bundle joshskidmore/zsh-fzf-history-search
antigen bundle zsh-users/zsh-completions
antigen bundle zsh-users/zsh-autosuggestions
antigen bundle zsh-users/zsh-syntax-highlighting

# Platform-specific bundles
if [ "$IS_MACOS" = true ] || [ "$IS_LINUX" = true ]; then
  # Add docker bundles for macOS and regular Linux (not WSL)
  antigen bundle docker
  antigen bundle docker-compose
elif [ "$IS_WSL" = true ] && command -v docker >/dev/null 2>&1; then
  # Add docker bundles for WSL only if Linux docker is actually installed
  antigen bundle docker
  antigen bundle docker-compose
fi

# Load the theme.
antigen theme romkatv/powerlevel10k

# Tell Antigen that you're done.
antigen apply

# Configure autosuggestions - ADD THIS SECTION
ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE="fg=#666666"
ZSH_AUTOSUGGEST_STRATEGY=(history completion)
ZSH_AUTOSUGGEST_BUFFER_MAX_SIZE=20

# Modern CLI tool aliases (add after antigen apply)
if command -v eza >/dev/null 2>&1; then
  alias ls="eza --icons"
  alias ll="eza -la --icons --header"
  alias tree="eza --tree"
fi

if command -v bat >/dev/null 2>&1; then
  alias cat="bat"
  alias less="bat"
fi

if command -v fd >/dev/null 2>&1; then
  alias find="fd"
fi

# System utilities
alias h="history"
if command -v btop >/dev/null 2>&1; then
  alias top="btop"
fi
if command -v ncdu >/dev/null 2>&1; then
  alias du="ncdu"
fi

# Enable better completion handling - ENHANCED VERSION
zstyle ':completion:*:warnings' format 'No matches found'
zstyle ':completion:*' menu select
zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
setopt NULL_GLOB
setopt AUTO_MENU
setopt COMPLETE_IN_WORD
setopt ALWAYS_TO_END

# source the PowerLevel10k config
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# =============================================================================
# AI Development Environment (Mistral API + OpenHands)
# =============================================================================

# Load local .env file if it exists (keeps API keys out of git)
if [ -f ~/.env ]; then
  set -a  # automatically export all variables
  source ~/.env
  set +a  # stop automatically exporting
fi

# Mistral API Configuration - load from environment
export MISTRAL_API_KEY="${MISTRAL_API_KEY:-}"

# LiteLLM Local Proxy Configuration
export LITELLM_CONFIG="$HOME/.config/litellm/config.yaml"
export LITELLM_PORT="4000"

# OpenHands will use LiteLLM proxy at localhost:4000
export OPENAI_API_BASE="http://localhost:4000"
export OPENAI_API_KEY="local_dev_key_change_me"  # Matches LiteLLM master_key

# LiteLLM Proxy Management
litellm-start() {
  # Check if container already exists and clean it up
  if docker ps -a | grep -q "litellm"; then
    echo "üßπ Cleaning up existing litellm container..."
    docker stop litellm 2>/dev/null || true
    docker rm litellm 2>/dev/null || true
  fi
  
  # Check if port 4000 is in use
  if lsof -i :4000 >/dev/null 2>&1 || netstat -an 2>/dev/null | grep -q ":4000.*LISTEN"; then
    echo "‚ö†Ô∏è  Port 4000 is already in use. Checking what's using it..."
    if command -v lsof >/dev/null 2>&1; then
      lsof -i :4000 2>/dev/null || echo "Unable to determine what's using port 4000"
    else
      echo "Install lsof to see what's using port 4000: brew install lsof"
    fi
    echo "üí° Try: litellm-clean to force cleanup, or use a different port"
    return 1
  fi
  
  echo "üöÄ Starting LiteLLM proxy on port 4000..."
  container_id=$(docker run -d --name litellm --rm -p 4000:4000 \
    -v ~/.config/litellm:/app/config \
    -e MISTRAL_API_KEY="$MISTRAL_API_KEY" \
    ghcr.io/berriai/litellm:main-latest --config /app/config/config.yaml --port 4000)
  
  if [ -z "$container_id" ]; then
    echo "‚ùå Failed to start LiteLLM container"
    return 1
  fi
  
  echo "‚è≥ Waiting for LiteLLM proxy to be ready..."
  
  # Wait with retry logic (up to 30 seconds)
  for i in {1..10}; do
    sleep 3
    if curl -s http://localhost:4000/health >/dev/null 2>&1; then
      echo "‚úÖ LiteLLM proxy started successfully at http://localhost:4000"
      return 0
    fi
    echo "   Attempt $i/10 - still starting..."
  done
  
  echo "‚ùå LiteLLM proxy failed to start within 30 seconds. Check logs with: litellm-logs"
  return 1
}

litellm-stop() {
  docker stop litellm 2>/dev/null || echo "LiteLLM container not running"
}

alias litellm-clean='docker stop litellm 2>/dev/null; docker rm litellm 2>/dev/null; echo "üßπ Cleaned up litellm container"'
alias litellm-restart='litellm-stop && sleep 1 && litellm-start'
alias litellm-logs='docker logs litellm -f 2>/dev/null || echo "LiteLLM container not found. Start it with: litellm-start"'
litellm-status() {
  if curl -s http://localhost:4000/health >/dev/null 2>&1; then
    echo "‚úÖ LiteLLM proxy is running at http://localhost:4000"
    echo "üìä Models available:"
    curl -s http://localhost:4000/v1/models -H "Authorization: Bearer local_dev_key_change_me" | jq -r ".data[]?.id" 2>/dev/null || echo "   (Unable to fetch model list)"
  else
    echo "‚ùå LiteLLM proxy not responding on port 4000"
    if docker ps | grep -q "litellm"; then
      echo "üîç Container exists but not responding - check logs: litellm-logs"
    else
      echo "üîç Container not running - start it: litellm-start"
    fi
  fi
}

# OpenHands Management  
openhands-start() {
  # Check if container already exists and clean it up
  if docker ps -a | grep -q "openhands-app"; then
    echo "üßπ Cleaning up existing OpenHands container..."
    docker stop openhands-app 2>/dev/null || true
    docker rm openhands-app 2>/dev/null || true
  fi
  
  # Check if port 3000 is in use
  if lsof -i :3000 >/dev/null 2>&1 || netstat -an 2>/dev/null | grep -q ":3000.*LISTEN"; then
    echo "‚ö†Ô∏è  Port 3000 is already in use. Checking what's using it..."
    if command -v lsof >/dev/null 2>&1; then
      lsof -i :3000 2>/dev/null || echo "Unable to determine what's using port 3000"
    else
      echo "Install lsof to see what's using port 3000: brew install lsof"
    fi
    echo "üí° Try: docker stop openhands-app or use a different port"
    return 1
  fi
  
  echo "üöÄ Starting OpenHands on port 3000..."
  container_id=$(docker run -d --rm -e SANDBOX_RUNTIME_CONTAINER_IMAGE=docker.all-hands.dev/all-hands-ai/runtime:0.39-nikolaik -e LOG_ALL_EVENTS=true -v /var/run/docker.sock:/var/run/docker.sock -v ~/.openhands-state:/.openhands-state -p 3000:3000 --add-host host.docker.internal:host-gateway --name openhands-app docker.all-hands.dev/all-hands-ai/openhands:0.39)
  
  if [ -z "$container_id" ]; then
    echo "‚ùå Failed to start OpenHands container"
    return 1
  fi
  
  echo "‚è≥ Waiting for OpenHands to be ready..."
  
  # Wait with retry logic (up to 30 seconds)
  for i in {1..10}; do
    sleep 3
    if curl -s http://localhost:3000 >/dev/null 2>&1; then
      echo "‚úÖ OpenHands started successfully at http://localhost:3000"
      echo "üåê Open http://localhost:3000 in your browser to use OpenHands"
      return 0
    fi
    echo "   Attempt $i/10 - still starting..."
  done
  
  echo "‚ùå OpenHands failed to start within 30 seconds. Check logs with: docker logs openhands-app"
  return 1
}

openhands-stop() {
  docker stop openhands-app 2>/dev/null || echo "OpenHands container not running"
}

alias openhands-status='docker ps | grep openhands-app && echo "‚úÖ Running at http://localhost:3000" || echo "‚ùå Not running"'

# Complete AI Development Workflow
ai-start() {
  echo "ü§ñ Starting AI Development Stack..."
  
  # Check prerequisites
  if [ -z "$MISTRAL_API_KEY" ]; then
    echo "‚ö†Ô∏è  MISTRAL_API_KEY not set. Please add it to ~/.env:"
    echo "   echo \"MISTRAL_API_KEY=your_key_here\" >> ~/.env"
    echo "   source ~/.env"
    return 1
  fi
  
  # Start LiteLLM
  if litellm-start; then
    echo "‚úÖ LiteLLM proxy started successfully"
    echo ""
    
    # Start OpenHands
    if openhands-start; then
      echo ""
      echo "üéâ AI Development Stack is ready!"
      echo "üåê LiteLLM: http://localhost:4000"
      echo "ü§ñ OpenHands: http://localhost:3000"
    else
      echo "‚ùå Failed to start OpenHands"
      echo "üí° LiteLLM is running, but OpenHands failed to start"
      return 1
    fi
  else
    echo "‚ùå Failed to start LiteLLM proxy"
    echo "üí° Try: litellm-clean && ai-start"
    return 1
  fi
}

ai-stop() {
  echo "üõë Stopping AI Development Stack..."
  openhands-stop
  litellm-stop
  echo "‚úÖ AI Development Stack stopped"
}

alias ai-restart='ai-stop && sleep 2 && ai-start'

ai-status() {
  echo "ü§ñ AI Development Stack Status:"
  echo "================================"
  litellm-status
  echo ""
  openhands-status
  echo ""
  if [ -n "$MISTRAL_API_KEY" ]; then
    echo "üîë API Key: Set ‚úÖ"
  else
    echo "üîë API Key: Not set ‚ùå (add to ~/.env)"
  fi
}